package Decoder

import (
	"bytes"
	"testing"
)

func TestReadINFOChunk(t *testing.T) {
	b := []byte{0x49, 0x4e, 0x41, 0x4d, 0x0c, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x63, 0x6b,
		0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x00, 0x49, 0x50, 0x52, 0x44, 0x0c, 0x00, 0x00,
		0x00, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x00, 0x49,
		0x41, 0x52, 0x54, 0x08, 0x00, 0x00, 0x00, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x00,
		0x00, 0x49, 0x43, 0x4d, 0x54, 0x0c, 0x00, 0x00, 0x00, 0x6d, 0x79, 0x20, 0x63, 0x6f,
		0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x49, 0x43, 0x52, 0x44, 0x06, 0x00, 0x00,
		0x00, 0x32, 0x30, 0x31, 0x37, 0x00, 0x00, 0x49, 0x47, 0x4e, 0x52, 0x06, 0x00, 0x00,
		0x00, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00, 0x00,
		0x00, 0x34, 0x32, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x8c, 0x00, 0x00, 0x00, 0x49,
		0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x54, 0x41, 0x4c, 0x42, 0x00,
		0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x20, 0x74, 0x69,
		0x74, 0x6c, 0x65, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x52, 0x43,
		0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x34, 0x32, 0x43, 0x4f, 0x4d, 0x4d,
		0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x79, 0x20,
		0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x50, 0x45, 0x31, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x54, 0x44, 0x52, 0x43,
		0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x32, 0x30, 0x31, 0x37, 0x54, 0x43, 0x4f,
		0x4e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x67, 0x65, 0x6e, 0x72, 0x65}

	r := bytes.NewReader(b)

	i, err := ReadINFOChunk(r)
	if err != nil {
		t.Errorf("Error: %s", err.Error())
	}

	if i.Artist != "artist" {
		t.Errorf("Error: did not find the correct artist. Found %s", i.Artist)
	}

	if i.CreationDate != "2017" {
		t.Errorf("Error: did not find the correct creation date. Found %s", i.CreationDate)
	}

	if i.Title != "track title" {
		t.Errorf("Error: did not find the correct title. Found %s", i.Title)
	}

	if i.Genre != "genre" {
		t.Errorf("Error: did not find the correct genre. Found %s", i.Genre)
	}

	if i.Product != "album title" {
		t.Errorf("Error: did not find the correct product. Found %s", i.Product)
	}

	if i.Comments != "my comment" {
		t.Errorf("Error: did not find the correct comments. Found %s", i.Comments)
	}

}
